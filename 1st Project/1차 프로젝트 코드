# library(RCurl)
# library(tidyverse)
# library(jsonlite)
#library(doBy)
install.packages('encode')
library(encode)
# c1<-read.csv("77.csv")
# c1<-c1 %>% filter(gameDuration>=1200)
# d1<-c1$gameId
# 
# cham_lane<-read.csv("name.csv")
# cham_bot<-read.csv("name_bot.csv")
# 
# mat_id<-d1[1]
# ggplot(z1,aes(x=x,y=y))+
#   geom_point()+
#   coord_cartesian(xlim = c(0,15000),ylim = c(0,15000))
# library(car)
## 바텀유저들은 어떤벤을했는지?
game1<-NULL

lane<-NULL
df_lane<-NULL
k<-1
p<-1
for(p in c(1:10)){
ababab<-try(
for(k in k:nrow(c1)){
m<-1
  mat_id<-d1[k]
  RoitURL_mat <- paste0("https://kr.api.riotgames.com/lol/match/v4/matches/",mat_id)#,matches.gameId
  url_mat <-paste0(RoitURL_mat, paste0("?api_key=", apikey))
  j_mat<-fromJSON(getURL(url_mat))
  RoitURL_mat_lane <- paste0("https://kr.api.riotgames.com/lol/match/v4/timelines/by-match/",mat_id)#,matches.gameId
  url_mat_lane <-paste0(RoitURL_mat_lane, paste0("?api_key=", apikey))
  j_mat_lane<-fromJSON(getURL(url_mat_lane))
  df_lane<-NULL
  # un_mat<-unlist(j_mat)
  # m_mat<-as.matrix(un_mat)
  # df_mat<-as.data.frame(m_mat)
  # df_mat<-t(df_mat)
  # aa_mat<-merge(aa_mat,df_mat,all = TRUE)
  # aa_mat[is.na(aa_mat)]<-0##결측치 처리
  a99<-j_mat[["gameId"]]
  a0<-j_mat[8]
  a11<-j_mat[["participants"]][["championId"]]
  a12<-j_mat[["participants"]][["teamId"]]
  a1<-j_mat[[12]][[6]][10]
  a2<-j_mat[[12]][[6]][11]
  a3<-j_mat[[12]][[6]][12]
  a4<-j_mat[[12]][[6]][27]
  a5<-j_mat[[12]][[6]][36]
  a6<-j_mat[[12]][[6]][38]
  a7<-j_mat[[12]][[6]][42]
  a8<-j_mat[[12]][[6]][52]
  a9<-j_mat[["participants"]][["stats"]][["win"]]
  FBK<-j_mat[["participants"]][["stats"]][["firstBloodKill"]]
  DRG<-j_mat[["teams"]][["firstDragon"]]
  
  j<-1
  for(j in c(1:10)){
    name[j]<-cham_lane$name[a11[j]==cham_lane$number]
  }
  for(j in c(1:10)){
    
    a<-j_mat_lane[["frames"]]
    z1<-NULL
    z1$x<-a$participantFrames[,j]$position[,1]
    z1$y<-a$participantFrames[,j]$position[,2]
    z1<-as.data.frame(z1)
    z1<-head(z1,10)
    
    
    i<-1
    TOP<-0
    MID<-0
    BOT_CARRY<-0
    
    lane<-data.frame(TOP,MID,BOT_CARRY)
    
   
    for(i in c(1:10)){

      
      # if (z1$x[i]>=600 & z1$x[i]<=1800 & 
      #     z1$y[i]>=8400 & z1$y[i]<=14100){
      #   lane$TOP<-lane$TOP+1
      # }
      # else if (z1$x[i]>=600 & z1$x[i]<=4500 & 
      #          z1$y[i]>=10200 & z1$y[i]<=14400){
      #   lane$TOP<-lane$TOP+3
      # }  
      # else if (z1$x[i]>=900 & z1$x[i]<=6000 & 
      #          z1$y[i]>=13200 & z1$y[i]<=14400){
      #   lane$TOP<-lane$TOP+1
      # }
      # else if (z1$x[i]>=4850 & z1$x[i]<=10000 &
      #          z1$y[i]>=4850 & z1$y[i]<=12000){
      #   lane$MID<-lane$MID+1
      # }
      # else if (z1$x[i]>=5600 & z1$x[i]<=8850 &
      #          z1$y[i]>=6000 & z1$y[i]<=8700){
      #   lane$MID<-lane$MID+3
      # }
      # else if (z1$x[i]>=6500 & z1$x[i]<=9600 &
      #          z1$y[i]>=7000 & z1$y[i]<=9300){
      #   lane$MID<-lane$MID+3 
      # }
      # else if (z1$x[i]>=3800 & z1$x[i]<=6600 &
      #          z1$y[i]>=4500 & z1$y[i]<=6700){
      #   lane$MID<-lane$MID+1
      # }
      # 
      
      
      
      
      
      if(j_mat[["participants"]][["championId"]][j]%in% c(cham_bot$number) & (z1$x[i]>=5000 & z1$x[i]<=10000 &
         z1$y[i]>=450 & z1$y[i]<=15000)){ 
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }else if(j_mat[["participants"]][["championId"]][j]%in% c(cham_bot$number)&z1$x[i]>=10000 & z1$x[i]<=14700&
         z1$y[i]>=600 & z1$y[i]<=5000){
         lane$BOT_CARRY<-lane$BOT_CARRY+1
      }else if(j_mat[["participants"]][["championId"]][j]%in% c(cham_bot$number)&z1$x[i]>=5000 & z1$x[i]<=14700&
              z1$y[i]>=1350 & z1$y[i]<=14700){
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      
     
      
    } 
    df_lane<-rbind(df_lane,lane)
    
    
    
  }
  
 
 
  lll<-rep("MID",10)
  as.matrix(lll,cols=10)
  as.data.frame(lll)
 
  df_lane_1<-df_lane[1:5,]
  as.data.frame(df_lane_1)
  df_lane_2<-df_lane[6:10,]
  as.data.frame(df_lane_2)
  
 
  if(max(df_lane_1$BOT_CARRY)!=0 & max(df_lane_2$BOT_CARRY)!=0){
  lll[which.max(df_lane_1$BOT_CARRY)]<-"BOT_CARRY"
  lll[which.max(df_lane_2$BOT_CARRY)+5]<-"BOT_CARRY"
  as.data.frame(lll)}
  
  
   spell1<-j_mat[["participants"]][["spell1Id"]]
   as.data.frame(spell1)
   spell2<-j_mat[["participants"]][["spell2Id"]]
   as.data.frame(spell2)
   
   
   
   lll[which(spell1==11)]<-"JUNGLE"
   lll[which(spell2==11)]<-"JUNGLE"

   
  tot_kill_j<-j_mat[["participants"]][["stats"]][["neutralMinionsKilled"]]
  tot_kill_j1<-j_mat[["participants"]][["stats"]][["neutralMinionsKilled"]][c(1:5)]
  tot_kill_j2<-j_mat[["participants"]][["stats"]][["neutralMinionsKilled"]][c(6:10)]

  tot_kill_m1<-j_mat[["participants"]][["stats"]][["totalMinionsKilled"]][c(1:5)]
  tot_kill_m2<-j_mat[["participants"]][["stats"]][["totalMinionsKilled"]][c(6:10)]

  
  tot_kill1<-tot_kill_j1+tot_kill_m1
   as.data.frame(tot_kill1)
   tot_kill2<-tot_kill_j2+tot_kill_m2
   as.data.frame(tot_kill2)

   lll_1<-lll[1:5]
   as.data.frame(lll_1)
   lll_2<-lll[6:10]
   as.data.frame(lll_2)

  
  
for(m in c(1:5)){
  if( tot_kill1[m]==min(tot_kill1)){
    lll[m]<-"SUP"
  }
  if( tot_kill2[m]==min(tot_kill2)){
    lll[5+m]<-"SUP"
  }
}
 
 
  
  bot<-cbind(a99,a0,a11,name,a12,a1,a2,a3,a4,a5,a6,a7,a8,a9,lll,FBK,DRG)
  
  bot$DRG[1:5]<-DRG[1]
  bot$DRG[6:10]<-DRG[2]
  


  bot<-bot %>% filter(lll=="SUP"|lll=="BOT_CARRY")
  bot_1<-bot[bot$a12==100,]
  bot_1<-orderBy(~lll,bot_1)
  bot_2<-bot[bot$a12==200,]
  bot_2<-orderBy(~lll,bot_2)
  
  bot_1$kills_ADC<-bot_1[1,]$kills
  bot_1$deaths_ADC<-bot_1[1,]$deaths
  bot_1$assists_ADC<-bot_1[1,]$assists
  
  bot_1$kills_SUP<-bot_1[2,]$kills
  bot_1$deaths_SUP<-bot_1[2,]$deaths
  bot_1$assists_SUP<-bot_1[2,]$assists
  
  bot_2$kills_ADC<-bot_2[1,]$kills
  bot_2$deaths_ADC<-bot_2[1,]$deaths
  bot_2$assists_ADC<-bot_2[1,]$assists
  
  bot_2$kills_SUP<-bot_2[2,]$kills
  bot_2$deaths_SUP<-bot_2[2,]$deaths
  bot_2$assists_SUP<-bot_2[2,]$assists
  
  
  bot_1$FBK<-(bot_1$FBK[1]|bot_1$FBK[2])
  bot_2$FBK<-(bot_2$FBK[1]|bot_1$FBK[2])
  
  bot_1$ADC<-bot_1$name[1]
  bot_1$SUP<-bot_1$name[2]
  bot_1$name<-paste0(bot_1$name[1], " & ",bot_1$name[2])
  
  bot_1$KDA_mean<-if(sum(bot_1$deaths)!=0){
    round(mean(bot_1$kills+bot_1$assists/bot_1$deaths),2)
  }else{
    round(mean((bot_1$kills+bot_1$assists)*1.2),2)
  }
  bot_2$ADC<-bot_2$name[1]
  bot_2$SUP<-bot_2$name[2]
  bot_2$name<-paste0(bot_2$name[1], " & ",bot_2$name[2])
  bot_2$KDA_mean<-if(sum(bot_2$deaths)!=0){
    round(mean(bot_2$kills+bot_2$assists/bot_2$deaths),2)
  }else{
    round(mean((bot_2$kills+bot_2$assists)*1.2),2)
  }
  
  bot_1$totalDamageDealtToChampions_mean<-sum(bot_1$totalDamageDealtToChampions)/2
  bot_2$totalDamageDealtToChampions_mean<-sum(bot_2$totalDamageDealtToChampions)/2
  
  bot_1$visionScore_mean<-sum(bot_1$visionScore)/2
  bot_2$visionScore_mean<-sum(bot_2$visionScore)/2
  
  bot_1$totalDamageTaken_mean<-sum(bot_1$totalDamageTaken)/2
  bot_2$totalDamageTaken_mean<-sum(bot_2$totalDamageTaken)/2
  
  bot_1$goldEarned_mean<-sum(bot_1$goldEarned)/2
  bot_2$goldEarned_mean<-sum(bot_2$goldEarned)/2
  
  bot_1$visionWardsBoughtInGame_mean<-sum(bot_1$visionWardsBoughtInGame)/2
  bot_2$visionWardsBoughtInGame_mean<-sum(bot_2$visionWardsBoughtInGame)/2
  
  
  
  bot<-rbind(bot_1,bot_2)
  if(nrow(bot)==4){
    bot<-unique(bot[,-c(2,3,6,7,8,9,10,11,12,13,15)])
    game1<-rbind(game1, bot)
  }else{
    
  }
  game1<-unique(game1)

  
  
  write.csv(game1,'game1.csv')
}
,silent = T
)
# game1<-unique(game1)
if(class(ababab)=="try-error"){
  Sys.sleep(120)
}
}
